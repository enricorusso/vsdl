/*
 * generated by Xtext 2.10.0
 */
package it.csec.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import it.csec.xtext.vsdl.Model
import it.csec.xtext.vsdl.SMT.SMTContext
import it.csec.xtext.vsdl.SMT.SMTModel

import java.io.IOException
import java.io.BufferedReader
import java.io.InputStreamReader

import org.eclipse.core.resources.ResourcesPlugin;

import it.csec.xtext.VsdlResources

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VsdlGenerator extends AbstractGenerator {
	var VsdlConsole console
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val dotIndex = resource.URI.lastSegment.lastIndexOf('.')
		val fileName = resource.URI.lastSegment.substring(0, dotIndex)
		
		console = new VsdlConsole(fileName)
	
		fsa.generateFile(
			fileName + ".smt2",
			compileModel(resource.contents.get(0) as Model, console)
		)

		// TODO
		var file = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + "/" +
			fsa.getURI(fileName + ".smt2").toPlatformString(true)

		var Process process = null
		try {
			//process = Runtime.runtime.exec("cmd /C d:\\z3\\bin\\z3.exe " + file)
			process = Runtime.runtime.exec("cmd /C " + VsdlResources.solver + " " + file)
			var reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
			var line = ""
			var ln = 0
			var data = new StringBuilder();
			var model = new StringBuilder();
			var sat = false
			var get_model = true
			
			while ((line = reader.readLine()) !== null) {
				//console.stream.println(ln + ":"  + line)
				if (line.equals("sat")) {
					sat = true
					console.stream.println("sat")
				}
				if (sat && ln > 0 && get_model) {
					if (line.equals(")")) {
						get_model = false
					}
					model.append(line + "\n")
				} else {
					if (sat && ln > 0) {
						data.append(line + "\n")
					}
				}
				ln++
			}
			
			if (! sat) {
				console.stream.println("unsat")
			}

			if (model !== null) {			
				fsa.generateFile(
					fileName + "_model.smt2",
					model.toString
				)
			}
			
			if (data !== null) {
				fsa.generateFile(
					fileName + "_values.smt2",
					data.toString
				)				
			}
			process.waitFor();
		} catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            return;
        }
	}
	
	def compileModel(Model model, VsdlConsole console) {
	 	var ttu = 60
	 	var ttuStep = 5
	 	
	 	if (VsdlResources.getTtuStep !== null) {
	 		ttuStep = Integer.parseInt(VsdlResources.getTtuStep)
	 	}
		
		if (model.timeToUse !== null) {
				ttu = model.timeToUse.value
		} else {
			if (VsdlResources.ttu !== null) {
				ttu = Integer.parseInt(VsdlResources.ttu)
			}
		} 

		var env = new SMTContext(model.name, ttu, ttuStep, console)

		var smtscript = env.smt.smtConfig.defaultPrinter.toString(new SMTModel(model).compileScript(env))
		
		var cal = java.util.Calendar.getInstance();				
		'''
		; Scenario «model.name» compiled on «new java.text.SimpleDateFormat("yyyy/MM/dd").format(cal.getTime())» at «new java.text.SimpleDateFormat("HH.mm.ss").format(cal.getTime())»
		; TTU: «ttu», Step: «ttuStep»
		«smtscript.substring(1, smtscript.length()-1)»
		'''		
	}	
}