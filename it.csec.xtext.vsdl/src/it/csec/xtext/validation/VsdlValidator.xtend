/*
 * generated by Xtext 2.10.0
 */
package it.csec.xtext.validation

import it.csec.xtext.vsdl.IPAddress
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ValidationMessageAcceptor
import it.csec.xtext.vsdl.IPRangeA

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class VsdlValidator extends AbstractVsdlValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					VsdlPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
   	@Check
	def checkIPAddress(IPAddress ip) {
		if ((ip.octet1 > 255) || (ip.octet2 > 255) || (ip.octet3 > 255) || (ip.octet4 > 255)) {
			error("Invalid IP Address", null, ValidationMessageAcceptor.INSIGNIFICANT_INDEX)

		}
	}
	
	// TODO: check if network address is consistent with mask value
   	@Check
	def checkIPRangeA(IPRangeA ipr) {
		if ((ipr.address.octet1 > 255) || (ipr.address.octet2 > 255) || (ipr.address.octet3 > 255) || (ipr.address.octet4 > 255)) {
			error("Invalid IP address", null, ValidationMessageAcceptor.INSIGNIFICANT_INDEX)
		}
		
		if (ipr.bitmask < 0 || ipr.bitmask > 32) {
			error("Invalid netmask", null, ValidationMessageAcceptor.INSIGNIFICANT_INDEX)			
		}
	}
	
}
